import React, { useState, useEffect } from 'react';

const API_URL = 'http://localhost:3001';

export default function VulnerabilityLookupTool() {
  const [engineVersions, setEngineVersions] = useState([]);
  const [selectedEngineVersion, setSelectedEngineVersion] = useState('');
  const [rules, setRules] = useState([]);
  const [selectedRuleId, setSelectedRuleId] = useState('');
  const [mitigations, setMitigations] = useState([]);
  const [ruleDesc, setRuleDesc] = useState('');
  const [vulnDescription, setVulnDescription] = useState('');

  // Fetch engine versions on mount
  useEffect(() => {
    fetch(`${API_URL}/engine-versions`)
      .then(res => res.json())
      .then(data => {
        setEngineVersions(data);
        if (data.length > 0) {
          setSelectedEngineVersion(data[data.length - 1].engine_version.toString());
        }
      })
      .catch(() => setEngineVersions([]));
  }, []);

  // Fetch rules when engine version changes
  useEffect(() => {
    if (selectedEngineVersion) {
      fetch(`${API_URL}/rules?engine_version=${selectedEngineVersion}`)
        .then(res => res.json())
        .then(data => setRules(data.rules || []))
        .catch(() => setRules([]));
      setSelectedRuleId('');
      setMitigations([]);
      setRuleDesc('');
    }
  }, [selectedEngineVersion]);

  // Fetch mitigations when rule changes
  useEffect(() => {
    if (selectedRuleId && selectedEngineVersion) {
      fetch(`${API_URL}/rules/${selectedRuleId}?engine_version=${selectedEngineVersion}`)
        .then(res => res.json())
        .then(ruleData => {
          setVulnDescription(ruleData.vulnerability || '');
        })
        .catch(() => setVulnDescription(''));
      fetch(`${API_URL}/rules/${selectedRuleId}/mitigations?engine_version=${selectedEngineVersion}`)
        .then(res => res.json())
        .then(data => {
          setMitigations(data.mitigations || []);
          setRuleDesc(data.name ? `${data.name}` : data.id);
        })
        .catch(() => {
          setMitigations([]);
          setRuleDesc('');
        });
    }
  }, [selectedRuleId, selectedEngineVersion]);

  return (
    <div>
      <h3>Vulnerability Lookup</h3>
      <div style={{ display: 'flex', alignItems: 'center', gap: 24, marginBottom: 16 }}>
        <div>
          <label>Engine Version: </label>
          <select value={selectedEngineVersion} onChange={e => setSelectedEngineVersion(e.target.value)}>
            {engineVersions.map(v => (
              <option key={v.engine_version} value={v.engine_version}>
                v{v.engine_version} ({new Date(v.created_at).toLocaleString()})
              </option>
            ))}
          </select>
        </div>
        <div>
          <label>Vulnerability: </label>
          <select value={selectedRuleId} onChange={e => setSelectedRuleId(e.target.value)}>
            <option value="">Select</option>
            {rules.map(r => (
              <option key={r.id} value={r.id}>{r.name || r.id}</option>
            ))}
          </select>
        </div>
      </div>
      {selectedRuleId && (
        <div style={{ marginTop: 24 }}>
          <h4>{ruleDesc}</h4>
          {vulnDescription && <div style={{ marginBottom: 8, color: '#333' }}>{vulnDescription}</div>}
          <div>
            <strong>Mitigations:</strong>
            <ul>
              {mitigations.length === 0 ? <li>No mitigations found.</li> : mitigations.map(mit => (
                <li key={mit.id} style={{ color: mit.type === 'bridge' ? '#0074D9' : '#111' }}>
                  [{mit.type.toUpperCase()}] {mit.description}
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}
    </div>
  );
} 